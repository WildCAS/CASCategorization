[GENERAL]
init-hook='import sys; import os; sys.path.append(os.path.abspath(os.path.join(os.getcwd(), os.pardir))); sys.path.append("~/miniconda3/envs/cas/lib/python3.5/site-packages/");'

[BASIC]

# Regular expression which should only match correct function names
function-rgx=^[_a-z][a-z0-9_]*$

# Regular expression which should only match correct method names
method-rgx=^([_a-z][a-z0-9_]*|__[a-z0-9]+__)$

# Regular expression which should only match correct constant names
const-rgx=^(([A-Z_][A-Z0-9_]*)|(__.*__)|([a-z_]+_models)|([a-z_]+_services))$

# Good variable names which should always be accepted, separated by a comma
good-names=e,_,d,c,f,i,l,p,w,fn,fs,id,pc,sc,zf,setUp,tearDown,longMessage,maxDiff,mk

# Regex for dummy variables (to prevent 'unused argument' errors)
dummy-variables-rgx=_|unused_*|request|\*args|\*kwargs

# Ignore files or directories
ignore=migrations

[TYPECHECK]
generated-members=REQUEST,acl_users,aq_parent,objects,_meta,id

[DESIGN]

# Minimum number of public methods for a class (see R0903).
min-public-methods=0

# List of builtin function names that should not be used, separated by a comma
bad-functions=apply,input

[FORMAT]

max-line-length=80

indent-string='    '

[SIMILARITIES]

ignore-imports=yes

[MESSAGES CONTROL]

disable=locally-disabled,locally-enabled,logging-not-lazy,abstract-method,arguments-differ,broad-except,duplicate-code,fixme,no-member,no-self-use,redefined-variable-type,too-many-arguments,too-many-boolean-expressions,too-many-branches,too-many-instance-attributes,too-many-lines,too-many-locals,too-many-public-methods,too-few-public-methods,too-many-statements,no-init,old-style-class,missing-docstring

[REPORTS]

# Hide statistics, external dependencies and overall rating.
reports=no
